##
# Nginx server that proxies all requests to NodeJS test app
# server and let it decide whether it should prerender requests.
##
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name TEST_DUMB_NGINX_CONTAINER_HOST;

  access_log /var/log/nginx/dumb-access.log main;
  error_log /var/log/nginx/dumb-error.log debug;

  location / {
    proxy_set_header   X-Forwarded-For $remote_addr;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   X-Forwarded-Host $http_host;
    proxy_set_header   X-Forwarded-Port $server_port;
    proxy_set_header   X-Proxy-Mode "dumb";
    proxy_set_header   Host $http_host;
    proxy_pass         http://172.25.0.102:TEST_APP_NODEJS_SERVER_PORT;
  }
}

##
# Map that assigns $botTest to whether user agent is a bot.
##
map $http_user_agent $botTest {
  volatile;
  include /etc/nginx/conf.d/maps/bots.map;
}

##
# Map that assigns $extensionTest to whether extension should be prerendered.
##
map $uri $extensionTest {
  volatile;
  include /etc/nginx/conf.d/maps/extensions.map;
}

##
# Map that assigns $shouldPrerender to whether request should be proxied to prerender.
##
map "$botTest:$extensionTest" $shouldPrerender {
  volatile;
  default 0;
  "yes:yes" 1;
}

##
# Map that assigns $shouldNotPrerender to opposite of $shouldPrerender.
##
map $shouldPrerender $shouldNotPrerender {
  volatile;
  1 0;
  0 1;
}

##
# Nginx server that decides whether to proxy
# to Prerenderer server or test app server.
##
server {
  listen 80;
  listen [::]:80;
  server_name TEST_SMART_NGINX_CONTAINER_HOST;

  access_log /var/log/nginx/smart-access.log main;
  error_log /var/log/nginx/smart-error.log debug;

  ##
  # Resolve using Google's DNS server to force
  # DNS resolution and prevent caching of IPs.
  ##
  resolver 8.8.8.8;

  location / {
    proxy_set_header   X-Forwarded-For $remote_addr;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   X-Forwarded-Host $http_host;
    proxy_set_header   X-Forwarded-Port $server_port;
    proxy_set_header   X-Proxy-Mode "smart";
    proxy_set_header   X-Proxy-Should-Prerender $shouldPrerender;

    if ($shouldNotPrerender) {
      proxy_pass  http://172.25.0.102:TEST_STATIC_NODEJS_SERVER_PORT;
    }
    if ($shouldPrerender) {
      proxy_pass http://172.25.0.102:TEST_PRERENDERER_NODEJS_SERVER_PORT;
    }
  }
}
